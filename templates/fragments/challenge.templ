package fragments

// ChallengeFragment renders the HTMX fragment asking the user to sign the challenge.
templ ChallengeFragment(ch string) {
	<div class="bg-white p-6 rounded shadow">
		<h2 class="text-lg font-medium mb-2">Sign the challenge with your NIP-07 key</h2>
		<p class="text-sm text-gray-600 mb-4">Click the button to sign the challenge in your browser extension.</p>
		<input type="hidden" id="nostr-challenge" value={ ch }/>
		<div class="relative">
			<!-- Always-visible helper text -->
			<p class="text-sm text-gray-700 mb-2">Login with NIP-07 nostr extension</p>
			<button id="sign-challenge" class="w-full bg-green-600 text-white py-2 rounded" aria-live="polite">Sign challenge and continue</button>
			<p id="nostr-missing" class="text-red-600 text-sm mt-2 hidden">No nostr browser extension detected</p>
		</div>
	</div>
	<script>
		(function () {
			const btn = document.getElementById("sign-challenge");
			const missing = document.getElementById("nostr-missing");

			function setUnavailable() {
				if (btn) {
					btn.textContent = "Login with NIP-07 nostr extension";
					btn.disabled = true;
					btn.classList.remove("bg-green-600");
					btn.classList.add("bg-gray-400");
				}
				if (missing) missing.classList.remove("hidden");
			}

			function setAvailable() {
				if (btn) {
					btn.textContent = "Sign challenge and continue";
					btn.disabled = false;
					btn.classList.remove("bg-gray-400");
					btn.classList.add("bg-green-600");
				}
				if (missing) missing.classList.add("hidden");
			}

			// Since the page only requests this fragment when a NIP-07 provider is likely available,
			// do a simple immediate check and update UI accordingly.
			if (window.nostr && typeof window.nostr.signEvent === "function") {
				setAvailable();
			} else {
				setUnavailable();
			}

			if (btn) {
				btn.addEventListener("click", async function () {
					const originalLabel = btn.innerHTML;
					try {
						if (!window.nostr || !window.nostr.signEvent) {
							window.showToast("Nostr NIP-07 extension not found", "error");
							return;
						}
						const challenge = document.getElementById("nostr-challenge").value;
						if (!challenge) {
							window.showToast("missing challenge", "error");
							return;
						}
						const ev = {
							kind: 2222,
							content: challenge,
							created_at: Math.floor(Date.now() / 1000),
							tags: [],
						};
						// show spinner + disable button
						btn.disabled = true;
						btn.classList.remove("bg-green-600");
						btn.classList.add("bg-gray-400");
						btn.innerHTML =
							'<svg class="animate-spin -ml-1 mr-2 h-5 w-5 inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" aria-hidden="true"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path></svg><span>Signing...</span>';
						const signed = await window.nostr.signEvent(ev);
						// send signed event to server via HTMX
						htmx.ajax("POST", "/api/auth/login", {
							values: { signed_event: JSON.stringify(signed) },
						});
					} catch (e) {
						console.error("sign failed", e);
						// restore button state and show error using fragment fallback
						btn.innerHTML = originalLabel;
						setAvailable();
						window.showToast("sign failed: " + e, "error");
					}
				});
			}
		})();
	</script>
}
